@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class Webserver {
    - {static} PORT :int
    - {static} FORMATTER : DateTimeFormatter
    + Webserver()
}

class SocketThread {
    - insocked : Socked
    - makeRequest(tokens : String[]) : Request
    - makeRequestReader(tokens : String[]) : RequestReader
    - makeRequestArea(tokens : String[]) : RequestArea
    - makeHeaderAnswer() : String
    - makeJsonAnswer(request : Request) : String
    + run()
}

note right of SocketThread
inner class
of Webserver
end note

class DirectoryUsers {
    - {static} users : User[]
    + {static} makeUsers()
    + {static} findUserByCredential(credential : String) : User
}

class DirectoryAreas {
    - {static} allDoors : List<Door>
    - {static} rootArea : Area
    + {static} makeAreas() : void
    + {static} findAreaById(areaId : String) : Area
    + {static} findDoorById(id : String) : Door
    + {static} getAllDoors() : List<Door>
}

class Door {
    - id : String
    - to : Area
    - from : Area
    - doorState : DoorState

    + Door(id : String, to : Area, from : Area)
    + processRequest(request : RequestReader) : void
    - doAction(action : String) : void
    + isClosed() : boolean
    + toString() : String
    + toJson() : JSONObject
}



class User {
    - name : String
    - credential : String
    + User(name: String, credential: String)
    + toString() : String
}


abstract class DoorState {
    # door : Door
    # name : String
    # isClosed : boolean
    + open() : void
    + close() : void
    + getName() : String
    + getIsClose() : boolean
    + {abstract} lock() : void
    + {abstract} unlock() : void
    + {abstract} unlockShortly() : void
    + {abstract} propped() : void
}

class Locked extends DoorState {
    + Locked(door : Door)
    + unlock() : void
    + unlockShortly() : void
}

class Unlocked extends DoorState {
    + Unlocked(door : Door)
    + lock() : void
}

class Unlocked_Shortly extends DoorState {
    - ck : Clock
    - unlockedShortlyStartTime : LocalDateTime
    + Unlocked_Shortly(door : Door)
    + lock() : void
    + propped() : void
    + update(o : Observable, arg :  Object) : void
    - endDelay(timeToCompare : LocalDateTime) : double
}

class Propped extends DoorState {
    + Propped(door : Door)
    + lock() : void
}

abstract class Area {
    # id : String
    # description : String
    # partitionDad : Partition
    + Area(id : String, description : String, partitionDad : Partition)
    + getId() : String
    + {abstract} getDoorsGivingAccess() : List<Door>
    + {abstract} findAreaById(id : String) : Area
    + {abstract} getSpaces() : List<Area>
}

class Partition extends Area {
    - allAreas : List<Area>
    + Partition(id : String, descripcion : String, partitionDad : Partition)
    + getDoorsGivingAccess() : List<Door>
    + findAreaById(id : String) : Area
    + getSpaces() : List <Area>
}

class Space extends Area {
    - allDoors : List<Door>
    + getDoorsGivingAccess() : List<Door>
    + findAreaById(id : String) : Area
    + getSpaces() : List <Area>
}

class Clock extends Observable {
    - date : LocalDateTime
    - timer : Timer
    - {static} ck : Clock
    + Clock()
    + start() : void
    + {static} getInstance() : Clock
}

class Main {
    + {static} main(args : String)
}

note right of Main::main
DirectoryAreas.makeAreas()
DirectoryUserGroups.makeUserGroups()
new Webserver()
end note

Webserver +-right- SocketThread
DirectoryUsers --> "*" User : "users"
DirectoryAreas --> Area
Space *--|> Door
Partition o--|> Area
DirectoryAreas --> "*" Door
Door --> "1" DoorState
Clock "1" <-- "*" Unlocked_Shortly


Main -[hidden]down- Webserver

@enduml
