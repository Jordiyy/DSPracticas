@startuml
'https://plantuml.com/class-diagram
skinparam classAttributeIconSize 0

class Webserver {
    - {static} PORT :int
    - {static} FORMATTER : DateTimeFormatter
    + Webserver()
}

class SocketThread {
    - insocked : Socked
    - makeRequest(tokens : String[]) : Request
    - makeRequestReader(tokens : String[]) : RequestReader
    - makeRequestArea(tokens : String[]) : RequestArea
    - makeHeaderAnswer() : String
    - makeJsonAnswer(request : Request) : String
    + run()
}

note right of SocketThread
inner class
of Webserver
end note

class DirectoryUserGroups {
    - {static} userGroups : List<UserGroup>
    + {static} makeUserGroups()
    + {static} findUserByCredential(credential : String) : User
}

class UserGroup {
    - groupName : String
    - userList : List<User>
    - hasAccess : AllowAccess
    - areasPermissionForGroup : List<Area>
    + UserGroup(groupName : String, userList : ArrayList<User>, startTime : LocalDateTime, endTime : LocalDateTime)
    + getUserList() : List<User>
    + addUser(user : User) : void
    + addAllUsers(arrayUsers : List<User>) : void
    + setAreaPermission(areas : List<Area>, notPermissionArea : List<String>) : void
    + getAreaPermission() : List<Area>
    + checkDay(dayToCheck : LocalDateTime) : boolean
    + checkTime(timeToCheck : LocalDateTime) : boolean
    + checkPeriod(dateToCheck : LocalDateTime) : boolean
    + getGroupName() : String
    - setAllowAccess(startTime: LocalDateTime, endTime : LocalDateTime) : void
}

class DirectoryAreas {
    - {static} allDoors : List<Door>
    - {static} rootArea : Area
    + {static} makeAreas() : void
    + {static} findAreaById(areaId : String) : Area
    + {static} findDoorById(id : String) : Door
    + {static} getAllDoors() : List<Door>
}

class Door {
    - id : String
    - to : Area
    - from : Area
    - doorState : DoorState

    + Door(id : String, to : Area, from : Area)
    + processRequest(request : RequestReader) : void
    - doAction(action : String) : void
    + getId(): String
    + getStateName(): String
    + isClosed() : boolean
    + toString() : String
    + toJson() : JSONObject
    + setState(doorState : DoorState)
    + getTo(): Area
    + getFrom(): Area
}



class User {
    - name : String
    - credential : String
    - rol : UserGroup
    + User(name: String, credential: String, rol : UserGroup)
    + getCredential() : String
    + toString() : String
    + canBeInArea(areaTo : String, areaFrom : String) : boolean
    + checkTime(time: LocalDateTime) : boolean
    + checkDate(date: LocalDateTime) : boolean
    + checkDayWeek(day: LocalDateTime) : boolean
}


abstract class DoorState extends Observer{
    # door : Door
    # name : String
    # isClosed : boolean
    + DoorState(door : Door)
    # open() : void
    # close() : void
    + getName() : String
    + getIsClose() : boolean
    + {abstract} lock() : void
    + {abstract} unlock() : void
    + {abstract} unlockShortly() : void
    + {abstract} propped() : void
    + update (o : Observable, arg : Object)
}

class Locked extends DoorState {
    + Locked(door : Door)
    + unlock() : void
    + unlockShortly() : void
    + update (o : Observable, arg : Object)
}

class Unlocked extends DoorState {
    + Unlocked(door : Door)
    + lock() : void
    + update (o : Observable, arg : Object)
}

class Unlocked_Shortly extends DoorState {
    - ck : Clock
    - unlockedShortlyStartTime : LocalDateTime
    + Unlocked_Shortly(door : Door)
    + lock() : void
    + propped() : void
    + update(o : Observable, arg :  Object) : void
    - endDelay(timeToCompare : LocalDateTime) : double
}

class Propped extends DoorState {
    + Propped(door : Door)
    + lock() : void
}

abstract class Area {
    # id : String
    # description : String
    # partitionDad : Partition
    + Area(id : String, description : String, partitionDad : Partition)
    + getId() : String
    + {abstract} getDoorsGivingAccess() : List<Door>
    + {abstract} findAreaById(id : String) : Area
    + {abstract} getSpaces() : List<Area>
}

class Partition extends Area {
    - allAreas : List<Area>
    + Partition(id : String, description : String, partitionDad : Partition)
    + setAllAreas(areas : List<Area>) : void
    + setArea(area: Area) : void
    + getDoorsGivingAccess() : List<Door>
    + findAreaById(id : String) : Area
    + getSpaces() : List <Area>
}

class Space extends Area {
    - allDoors : List<Door>
    + getDoorsGivingAccess() : List<Door>
    + setDoors(doors: List<Door>) : void
    + getAllDoors(): List<Door>
    + setOneDoor(door: Door) : void
    + findAreaById(id : String) : Area
    + getSpaces() : List <Area>
}

class AllowAccess {
    - startPeriod : LocalDate
    - endPeriod : LocalDate
    - startingDayWeek : int
    - endDayWeek : int
    - startHour : LocalTime
    - endHour : LocalTime
    + AllowAccess()
    + setStartPeriod(startPeriod : LocalDate) : void
    + setEndPeriod(endPeriod : LocalDate) : void
    + setStartingDayWeek(startingDayWeek : int) : void
    + setEndDayWeek(endDayWeek : int) : void
    + setStartHour(startHour : LocalTime) : void
    + setEndHour(endHour : LocalTime) : void
    + checkTime(time LocalTime) : boolean
    + checkPeriod(date LocalDate) : boolean
    + checkDayWeek(day : int) : boolean
}

class Clock extends Observable {
    - date : LocalDateTime
    - timer : Timer
    - {static} ck : Clock
    + Clock()
    + start() : void
    + {static} getInstance() : Clock
}

class State {
    + {static} LOCKED : String
    + {static} UNLOCKED : String
    + {static} UNLOCKEDSHORTLY : String
    + {static} PROPPED : String
}

class Actions {
    + {static} LOCK : String
    + {static} UNLOCK : String
    + {static} UNLOCK_SHORTLY : String
    + {static} OPEN : String
    + {static} CLOSE : String
}

class Main {
    + {static} main(args : String)
}

note right of Main::main
DirectoryAreas.makeAreas()
DirectoryUserGroups.makeUserGroups()
new Webserver()
end note

Webserver +-right- SocketThread
DirectoryUserGroups <-- "*" UserGroup : "userGroups"
UserGroup "*" <-- "1" User : "userList"
UserGroup <-- AllowAccess : "access"
DirectoryAreas --> Area : "uses"
Space *--|> Door
DirectoryAreas --> "*" Door
Door --> "1" DoorState
Partition o-- "1..*" Door
Clock "1" <-- "*" Unlocked_Shortly
Door --> Area : "uses"



Clock --> Unlocked_Shortly : <<observer>>



Main -[hidden]down- Webserver

@enduml
